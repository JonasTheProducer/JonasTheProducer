# Projet SoundCloud Scraper

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

# Configurer les options de Selenium
options = Options()
options.add_argument("--enable-unsafe-swiftshader")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--remote-debugging-port=9222")
options.add_argument("--disable-gpu")
options.add_argument("--headless=new")  # Mode headless pour plus de stabilité
options.binary_location = "C:/Users/jonas/Desktop/projet python/chrome-win64/chrome-win64/chrome.exe"

# Configurer le chemin vers ChromeDriver
service = Service("C:/Users/jonas/Desktop/projet python/chromedriver-win64/chromedriver-win64/chromedriver.exe")

# Initialiser WebDriver
try:
    driver = webdriver.Chrome(service=service, options=options)
    print("ChromeDriver lancé avec succès.")
except Exception as e:
    print(f"Erreur lors de l'initialisation du WebDriver : {e}")
    exit()

# Charger la page de la chanson
url = "https://soundcloud.com/travisscott-2/04-drugs-you-should-try-it"
try:
    driver.get(url)
    print(f"Page chargée : {url}")
except Exception as e:
    print(f"Erreur lors du chargement de la page : {e}")
    driver.quit()
    exit()

# Récupérer les données (Likes, Vues, Reposts)
try:
    # Attendre et extraire le nombre de likes
    likes_element = WebDriverWait(driver, 15).until(
        EC.presence_of_element_located((By.XPATH, "//li[contains(@class, 'sc-ministats-item') and contains(@title, 'likes')]"))
    )
    likes = likes_element.text
    print(f"Likes : {likes}")

    # Attendre et extraire le nombre de reposts
    reposts_element = WebDriverWait(driver, 15).until(
        EC.presence_of_element_located((By.XPATH, "//li[contains(@class, 'sc-ministats-item') and contains(@title, 'reposts')]"))
    )
    reposts = reposts_element.text
    print(f"Reposts : {reposts}")

    # Attendre et extraire le nombre de plays
    views_element = WebDriverWait(driver, 15).until(
        EC.presence_of_element_located((By.XPATH, "//li[contains(@class, 'sc-ministats-item') and contains(@title, 'plays')]"))
    )
    views = views_element.text
    print(f"Views : {views}")

except TimeoutException:
    print("L'un des éléments n'a pas été trouvé dans le délai imparti.")
except Exception as e:
    print(f"Erreur lors de la récupération des informations : {e}")
finally:
    # Fermer le navigateur
    driver.quit()
